//реализация с помощью heapq
import heapq
someNumbers = [8, 3, 5, 1, 6, 2, 4, 7] # создание списка с исходными данными для кучи
heapq.heapify(someNumbers) # превращение списка в кучу
heapq.heappush(someNumbers, 0) # добавление нового элемента в кучу
someValue = heapq.heappop(someNumbers) # извлечение минимального элемента из кучи

//реализация собственного класса
class BinaryHeap
def __init__(self):
  self.heap = [3](https://tr-page.yandex.ru/translate?lang=en-ru&url=https%3A%2F%2Fwww.geeksforgeeks.org%2Fdsa%2Fbinary-heap-in-python%2F)

def insert(self, key):
  self.heap.append(key)
  self._heapify_up(len(self.heap) - 1)

def delete_min(self):
  self.heap.pop()
  self._heapify_down(0)

def get_min(self):
  if self.is_empty():
    return None
  return self.heap

def is_empty(self):
  return len(self.heap) == 0

//куча Фибоначчи
def fibonacci_for_loop(n):
  a, b = 0, 1
  for _ in range(n):
    print(a, end=' ')
    a, b = b, a + b
# Пример использования: fibonacci_for_loop(10)

